/**
 * 문제 출처: 백준 온라인 져지
 * https://www.acmicpc.net/problem/2210
 * 
 * 문제
 * 5×5 크기의 숫자판이 있다. 각각의 칸에는 숫자(digit, 0부터 9까지)가 적혀 있다. 이 숫자판의 임의의 위치에서 시작해서, 인접해 있는 네 방향으로 다섯 번 이동하면서, 각 칸에 적혀있는 숫자를 차례로 붙이면 6자리의 수가 된다. 이동을 할 때에는 한 번 거쳤던 칸을 다시 거쳐도 되며, 0으로 시작하는 000123과 같은 수로 만들 수 있다.
 * 숫자판이 주어졌을 때, 만들 수 있는 서로 다른 여섯 자리의 수들의 개수를 구하는 프로그램을 작성하시오.
 * 
 * 입력
 * 다섯 개의 줄에 다섯 개의 정수로 숫자판이 주어진다.
 * 
    1 1 1 1 1
    1 1 1 1 1
    1 1 1 1 1
    1 1 1 2 1
    1 1 1 1 1
 * 
 * 출력
 * 첫째 줄에 만들 수 있는 수들의 개수를 출력한다.    
 * 
    15
 * 
 * 힌트
 * 111111, 111112, 111121, 111211, 111212, 112111, 112121, 121111, 121112, 121211, 121212, 211111, 211121, 212111, 212121 이 가능한 경우들이다.
 * 
 * 파싱
 * arr = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 2, 1], [1, 1, 1, 1, 1]]
 * 
 * {{초기 설정}}
 * 상하좌우
 * dx = [1, -1, 0, 0]
 * dy = [0, 0, 1, -1]
 * 
 * 이미 있는 문자열인지 체크하는 객체
 * obj = {}
 */

// 파싱
const fs = require("fs");
const arr = fs
  .readFileSync("input.txt")
  .toString()
  .trim()
  .split("\n")
  .map(a => a.split(" ").map(Number));

// 초기 설정
let dx = [1, -1, 0, 0];
let dy = [0, 0, 1, -1];
let obj = {};

// 모든인덱스에 대하여 DFS 수행 (6번까지만)
for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[0].length; j++) {
    dfs(i, j, 1, "" + arr[i][j]);
  }
}

// 객체의 키값을 배열로 받아 길이를 리턴
console.log(Object.keys(obj).length);

/**
 * DFS
 * 숫자가 6자리가 되었을 때
 * 이미 있는 문자열이 아닌 경우에
 * 객체에 키값으로 저장, 값은 상관 없음(1로 지정)
 *
 * 4 방향에 대하여
 * 범위가 벗어나지 않으면
 * 해당 인덱스에 대해 dfs를 수행
 * 이때 파라미터로 nx, ny, count+1(카운트증가), str + arr[
 */
function dfs(x, y, count, str) {
  if (count === 6) {
    if (!obj[str]) {
      obj[str] = 1;
    }
    return;
  }
  for (let i = 0; i < 4; i++) {
    let nx = x + dx[i];
    let ny = y + dy[i];

    if (0 <= nx && nx < 5 && 0 <= ny && ny < 5) {
      dfs(nx, ny, count + 1, str + arr[nx][ny]);
    }
  }
}
/**
 * 채점 결과
 * 메모리: 11624KB
 * 시간: 200ms
 * 언어: JS
 */
