/**
 * 문제 출처: 백준 온라인 져지
 * https://www.acmicpc.net/problem/1520
 * 
 * 시간제한: 2초
 * 메모리제한: 128MB
 * 
 * 문제
 * 여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
 * 현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.
 * 지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.
 * 
 * 입력
 * 첫째 줄에는 지도의 세로의 크기 M과 가로의 크기 N이 빈칸을 사이에 두고 주어진다. 이어 다음 M개 줄에 걸쳐 한 줄에 N개씩 위에서부터 차례로 각 지점의 높이가 빈 칸을 사이에 두고 주어진다. M과 N은 각각 500이하의 자연수이고, 각 지점의 높이는 10000이하의 자연수이다.
 * 
    4 5
    50 45 37 32 30
    35 50 40 20 25
    30 30 25 17 28
    27 24 22 15 10
 * 
 * 출력
 * 첫째 줄에 이동 가능한 경로의 수 H를 출력한다. 모든 입력에 대하여 H는 10억 이하의 음이 아닌 정수이다.
 * 
    3
 * 
 * 파싱
 * n = 4, m = 5 (문제는 세로 M = 4 가로 N = 5)
 * arr = [
    [50, 45, 37, 32, 20],
    [35, 50, 40, 20, 25],
    [30, 30, 25, 17, 28],
    [27, 24, 22, 15, 10]
 * ]
 * 
 * 초기 설정
 * 상하좌우
 * dx = [1, 0, -1, 0]
 * dy = [0, 1, 0, -1]
 * 
 * DP겸 체크리스트
 * checkList = [[-1 * m] * n]
 */
const fs = require("fs");
let [nm, ...arr] = fs.readFileSync("input.txt").toString().trim().split("\n");
const [n, m] = nm.trim().split(" ").map(Number);
arr = arr.map((a) => a.trim().split(" ").map(Number));

let dx = [1, 0, -1, 0];
let dy = [0, 1, 0, -1];
let checkList = [];

for (let i = 0; i < n; i++) {
  checkList.push(new Array(m).fill(-1));
}
console.log(dfs(0, 0));

/**
 * DP용 체크리스트 값이 -1인 경우는 아직 방문하지 않았다는 뜻
 * DP용 체크리스트 값이 0인 경우는 방문은 했지만 아직 DFS가 끝나지 않아서 결과값을 기다리고 있는 중
 */
function dfs(x, y) {
  if (x == n - 1 && y == m - 1) {
    return 1;
  }
  if (checkList[x][y] != -1) {
    return checkList[x][y]; // DFS가 다 안끝난 경우면 0을 리턴하기 때문에 상관 없음.
  }

  checkList[x][y] = 0;

  for (let i = 0; i < 4; i++) {
    let nx = x + dx[i];
    let ny = y + dy[i];

    /**
     * 4 -> 1 (complete)
     * 4 -> 2
     * 4 -> 3
     *
     * 이런 식으로 내려갔을 때
     * 2의 DFS를 수행할 때 4로 다시 거슬러 올라갈 수 없기 때문에(arr[nx][ny] < arr[x][y] 조건)
     * DFS가 끝날때 바로바로 checkList[x][y] += dfs(nx,ny)를 해도 무관하다. 이전 값이 영향을 주지 않는다는 뜻.
     */
    if (0 <= nx && nx < n && 0 <= ny && ny < m && arr[nx][ny] < arr[x][y]) {
      checkList[x][y] += dfs(nx, ny);
    }
  }
  return checkList[x][y];
}
/**
 * 채점 결과
 * 메모리: 20936KB
 * 시간: 228ms
 * 언어: JS
 */
