/**
 * 문제 출처: 백준 온라인 져지
 * https://www.acmicpc.net/problem/1011
 * 
 * 시간 제한  | 메모리 제한
 * 2초      | 512MB
 * 
 * 문제
 * 우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다.
 * 그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다. 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다. 예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )
 * 김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다. 하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.
 * 김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.
 * 
 * 입력
 * 입력의 첫 줄에는 테스트케이스의 개수 T가 주어진다. 각각의 테스트 케이스에 대해 현재 위치 x 와 목표 위치 y 가 정수로 주어지며, x는 항상 y보다 작은 값을 갖는다. (0 ≤ x < y < 2^31)
 * 
    3
    0 3
    1 5
    45 50
 * 
 * 출력
 * 각 테스트 케이스에 대해 x지점으로부터 y지점까지 정확히 도달하는데 필요한 최소한의 공간이동 장치 작동 횟수를 출력한다.
 * 
    3
    3
    4
 * 
 * 파싱   
 * T = 3
 * arr = [[0, 3], [1, 5], [45, 50]]
 */

// 파싱
const fs = require("fs");
let [T, ...arr] = fs.readFileSync("input.txt").toString().trim().split("\n");
arr = arr.map(a => a.split(" ").map(Number));

arr = arr.map(test => {
  let start = test[0]; // 시작점
  let end = test[1]; // 종료점

  let distance = end - start; // 두 지점 간 차이
  let root = Math.sqrt(distance); // 1 + 2 + 3 + 2 + 1 => 9 = 3의 제곱의 원리, 아래 추가 설명

  /**
   * 두 지점간 차이가 제곱수이면
   * ex: 9
   * 합: 1 + 2 + 3(3개) + 2 + 1 (2개)
   * 개수: 2 * 3(제곱근) - 1
   *
   * 제곱수가 아니면
   * ex: 10 => 3.xx
   *
   * 3 (제곱근 내림) : 1 + 2 + 3 + 2 + 1 => 9 => 5번
   * 4 (제곱근 올림) : 1 + 2 + 3 + 4 + 3 + 2 + 1 => 16 => 7번
   * 총 2번의 수를 더할 수 있음(최대 3을 2번 더 더할 수 있음)
   * 3 이상의 수를 더하는 것은 불가함
   * 예를 들어, 4를 더했다면
   * 1 + 2 + 3 + 4 + 여기서 밑으로 내려가서 가장 최솟값으로 구하려면 3 + 2 + 1 이므로 => 제곱수가 되버림.
   *
   * 3이하의 수를 1번 더할 때 => 총 6번
   * 9 + 1, 9 + 2, 9 + 3 : 10, 11, 12
   *
   * 3이하의 수를 1번 더 더할 때 => 총 7번
   * 9 + 3 + 1, 9 + 3 + 2, 9 + 3 + 3 : 13, 14, 15
   */
  if (root % 1 == 0) {
    return 2 * root - 1;
  }

  root = Math.floor(root);

  if (distance <= root ** 2 + root) {
    return 2 * root;
  } else {
    return 2 * root + 1;
  }
});

console.log(arr.join("\n"));
/**
 * 채점 결과
 * 메모리: 9604KB
 * 시간: 120ms
 * 언어: JS
 */

/**
 * 루트값 4
 * 1 + 2 + 3 + 4 + 3 + 2 + 1 : 0 => 16 : 7
 * 17: 8
 * 18: 8
 * 19: 8
 * 1 + 2 + 3 + 4 + 4 + 3 + 2 + 1:  0 => 20 : 8
 * ---- 4 더한 값까지 (루트값 4)
 * 1 + 2 + 3 + 4 + 4 + 4 + 3 + 2 + 1: 0 => 24 : 9
 * ---- 4+4 더한 값까지 (루트값 4 * 2)
 * 1 + 2 + 3 + 4 + 5 + 4 + 3 + 2 + 1 : 0 => 25: 9
 * 루트값 5
 * */
