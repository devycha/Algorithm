// 문제 링크: https://www.acmicpc.net/problem/7569
/**
 * 문제 설명
 * 철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자모양 상자의 칸에 하나씩 넣은 다음, 상자들을 수직으로 쌓아 올려서 창고에 보관한다.
 * 창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토에 인접한 곳은 위, 아래, 왼쪽, 오른쪽, 앞, 뒤 여섯 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지 그 최소 일수를 알고 싶어 한다.
 * 토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.
 * 
 * 입력
 * 첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다. 둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. 정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 이러한 N개의 줄이 H번 반복하여 주어진다.
 * 토마토가 하나 이상 있는 경우만 입력으로 주어진다.
 * 
 * 입력값 예시
    5 3 2
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 1 0 0
    0 0 0 0 0
 *
 * 출력
 * 여러분은 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.
 * 
 * 출력값 예시
 * -1
 * 
 * 파싱
 * M = 5, N = 3, H = 2
 * arr = [
    [ 0, 0, 0, 0, 0 ],
    [ 0, 0, 0, 0, 0 ],
    [ 0, 0, 0, 0, 0 ],
    [ 0, 0, 0, 0, 0 ],
    [ 0, 0, 1, 0, 0 ],
    [ 0, 0, 0, 0, 0 ]
  ]
 *
 * {{초기 설정}}
 * 3차원 배열의 토마토
 * tomatoes = [
    [
      [ 0, 0, 0, 0, 0 ], 
      [ 0, 0, 0, 0, 0 ], 
      [ 0, 0, 0, 0, 0 ] 
    ],
    [ 
      [ 0, 0, 0, 0, 0 ], 
      [ 0, 0, 1, 0, 0 ], 
      [ 0, 0, 0, 0, 0 ] 
    ]
  ]
 * 
 * 3차원 배열로 만들기 위해 층별로 나눈 2차원 배열
 * tomato = [] (층별로 빈 배열 초기화)
 * 
 * 익은 토마토들의 위치 인덱스
 * aped = [ [ 1, 1, 2 ] ]
 * 
 * 상하좌우앞뒤
 * dx = [1, -1, 0, 0, 0, 0]
 * dy = [0, 0, 1, -1, 0, 0]
 * dz = [0, 0, 0, 0, 1, -1]
 * 
 * 
 */

// 파싱
const fs = require("fs");
let [MNH, ...arr] = fs.readFileSync("input.txt").toString().trim().split("\n");
const [M, N, H] = MNH.split(" ").map(Number);
arr = arr.map(a => a.split(" ").map(Number));

// 초기 설정
let tomatoes = []; // 3차원 배열의 토마토 박스들
let tomato = []; // 3차원 배열의 토마토 박스를 만들기 위해 사용
let aped = []; // 익은 토마토들의 위치 인덱스를 담은 배열

// 상하 좌우 앞뒤
let dx = [1, -1, 0, 0, 0, 0];
let dy = [0, 0, 1, -1, 0, 0];
let dz = [0, 0, 0, 0, 1, -1];

// 3차원 배열의 토마토 박스 만드는 과정
/**
 * 첫 층의 시작은
 * i = 0, N, 2N, 3N, ...
 *
 * 첫 층의 시작부터 총 N개의 토마토를 박스에 담는다.
 */
for (let i = 0; i < N * H; i += N) {
  tomato = []; // 한 층이 마무리되고 나면 빈 배열로 다시 초기화
  for (let j = i; j < i + N; j++) {
    tomato.push(arr[j]); // 한 층에 토마토의 한 줄의 토마를 담는다.(총 N번)
    for (let k = 0; k < M; k++) {
      if (arr[j][k] === 1) {
        // 익은 토마토일 때 그 index를 저장한다.
        /**
         * [박스의 층, 해당 층의 행, 해당 층의 열]
         * 가운데 인덱스 즉 해당 층의 행은 박스를 위로 쌓아 올리기 때문에 그만큼 빼줘야함.
         */
        aped.push([i / N, j - i, k]);
      }
    }
  }
  tomatoes.push(tomato);
}

/**
 * 포인터를 이용한 BFS
 */
let i = 0;
while (i < aped.length) {
  let x = aped[i][0]; // 현재 층
  let y = aped[i][1]; // 현재 층의 행
  let z = aped[i][2]; // 현재 층의 열

  // 6가지 방향으로 BFS를 전개
  for (let i = 0; i < 6; i++) {
    let nx = x + dx[i]; // 다음 층
    let ny = y + dy[i]; // 다음 층의 행
    let nz = z + dz[i]; // 다음 층의 열

    if (
      0 <= nx &&
      nx < H &&
      0 <= ny &&
      ny < N &&
      0 <= nz &&
      nz < M && // 여기까지는 범위체크
      /**
       * // BFS이기때문에 이미 값이 0보다 크다면 그 값이 최솟값이기 때문에
       * 그 부분은 이미 최대로 빨리 익어있는 것임.
       */
      tomatoes[nx][ny][nz] === 0
    ) {
      tomatoes[nx][ny][nz] = tomatoes[x][y][z] + 1; // 현재 토마토가 익은 시간 + 1 을 다음 위치의 토마토에 저장
      aped.push([nx, ny, nz]); // 익은 토마토의 인덱스 배열에 합류
    }
  }
  i++; // 포인터 증가 but => 원래는 큐에 넣고 앞에서부터 빼내는(shift) 과정을 거치면 되지만 시간을 아끼기 위해...
}
console.log(isAped(tomatoes));

/**
 * 토마토 박스가 모두 익기 위한 최소 시간을 찾는 3중 for문
 * 이때 이미 max = 1로 두고
 * 전부다 익은 토마토가 들어올 경우(없는 토마토 제외)
 * max값을 업데이트 시키지 않고 그대로 max-1 리턴
 *
 * 익은 토마토가 있을 경우 (값이 1보다 클경우, 1이면 이미 처음부터 익어있다는 것이기 떄문에)
 * max값 업데이트
 *
 * 마지막으로
 * 처음부터 익은 부분의 값이 1이었기 때문에, 최종 max값에서 1을 빼주어야 함(첫 시작 시간은 0부터 시작하므로)
 * 1 => 0 , max => max-1
 */
function isAped(tomatoes) {
  let max = 1;
  for (let i = 0; i < tomatoes.length; i++) {
    for (let j = 0; j < tomatoes[0].length; j++) {
      for (let k = 0; k < tomatoes[0][0].length; k++) {
        if (tomatoes[i][j][k] === 0) {
          return -1;
        } else if (tomatoes[i][j][k] > 1) {
          max = Math.max(max, tomatoes[i][j][k]);
        }
      }
    }
  }
  return max - 1;
}
/**
 * 채점 결과
 * 메모리: 148108KB
 * 시간: 848ms
 * 언어: JS
 */
